#!/usr/bin/make -f
# export DH_VERBOSE = 1

export ROOT = debian/tmp
export APP_FOLDER = $(ROOT)/usr/local/share/applications/helm

export DEB_VERSION = $(shell dpkg-parsechangelog | egrep '^Version:' | cut -f 2 -d ' ')
export MAJOR = $(shell echo $(DEB_VERSION) | cut -f 1 -d '-')
export MINOR_PATCH = $(shell echo $(DEB_VERSION) | cut -f 4 -d '.')


export APP_NAME = cert-manager
export APP_VERSION = $(MAJOR)-$(MINOR_PATCH)
export APP_TARBALL = $(APP_NAME)-$(APP_VERSION).tgz
export HELM_REPO = stx-platform
export STAGING = staging

export CM_VERSION = 1.7.1
export PATCH_1 = 0001-Patch-for-acmesolver-and-chartyaml-cm-v1.7.1.patch

%:
	dh $@

override_dh_auto_build:
	# Host a server for the helm charts.
	chartmuseum --debug --port=8879 --context-path='/charts' --storage="local" --storage-local-rootdir="." &
	sleep 2
	helm repo add local http://localhost:8879/charts

	# Make psp-rolebinding chart. Create the TGZ file.
	cd helm-charts && $(MAKE) psp-rolebinding

	# Extract the cert-manager chart
	rm -rf fluxcd
	mkdir -p fluxcd
	# Extract the upstream source
	tar -C fluxcd -xf helm-charts-certmanager-$(CM_VERSION).tar.gz

	# Apply patches with our modifications
	cp files/$(PATCH_1) fluxcd/helm-charts
	cd fluxcd/helm-charts ; \
	patch -p1 < $(PATCH_1) ; \
	# Copy CRD yaml files to templates ; \
	cp deploy/crds/*.yaml deploy/charts/cert-manager/templates/ ; \
	# Remove files causing lint error ; \
	cd deploy/charts/cert-manager ; \
	rm templates/BUILD.bazel templates/deployment.yaml.orig

	# Make the updated cert-manager helm-chart
	cp files/Makefile fluxcd/helm-charts/deploy/charts
	cd fluxcd/helm-charts/deploy/charts && $(MAKE) cert-manager
	cd fluxcd/helm-charts/deploy/charts && mv *.tgz $(APP_TARBALL)

	# Terminate the helm chart server.
	pkill chartmuseum

	# Setup the staging directory.
	mkdir -p $(STAGING)
	cp files/metadata.yaml $(STAGING)
	mkdir -p $(STAGING)/charts
	cp helm-charts/psp*.tgz $(STAGING)/charts
	cp fluxcd/helm-charts/deploy/charts/cert*.tgz $(STAGING)/charts
	cp -R fluxcd-manifests/ $(STAGING)/

	# Populate metadata.
	sed -i 's/@APP_NAME@/$(APP_NAME)/g' $(STAGING)/metadata.yaml
	sed -i 's/@APP_VERSION@/$(APP_VERSION)/g' $(STAGING)/metadata.yaml
	sed -i 's/@HELM_REPO@/$(HELM_REPO)/g' $(STAGING)/metadata.yaml

	# Copy the plugins: installed in the buildroot
	mkdir -p $(STAGING)/plugins
	cp /plugins/*.whl $(STAGING)/plugins

	# Generate checksum file and package the tarball
	cd $(STAGING) && find . -type f ! -name '*.md5' -print0 | xargs -0 md5sum > checksum.md5
	tar -zcf $(APP_TARBALL) -C $(STAGING)/ .

	# Cleanup staging
	rm -rf $(STAGING)

override_dh_auto_install:
	# Install the app tar file.
	install -d -m 755 $(APP_FOLDER)
	install -p -D -m 755 $(APP_TARBALL) $(APP_FOLDER)

override_dh_auto_test:

override_dh_usrlocal:
